# Задача 49: Планеты вращаются вокруг звезд по эллиптическим орбитам. Назовем самой далекой планетой ту,
# орбита которой имеет самую большую площадь. Напишите функцию find_farthest_orbit(list_of_orbits), 
# которая среди списка орбит планет найдет ту, по которой вращается самая далекая планета. 
# Круговые орбиты не учитывайте: вы знаете, что у вашей звезды таких планет нет, зато искусственные спутники
# были запущены на круговые орбиты. Результатом функции должен быть кортеж, содержащий длины полуосей эллипса 
# орбиты самой далекой планеты. Каждая орбита представляет из себя кортеж из пары чисел - полуосей ее эллипса. 
# Площадь эллипса вычисляется по формуле S = pi*a*b, где a и b - длины полуосей эллипса. 
# При решении задачи используйте списочные выражения. 
# Подсказка: проще всего будет найти эллипс в два шага: сначала вычислить самую большую площадь эллипса,
# а затем найти и сам эллипс, имеющий такую площадь. Гарантируется, что самая далекая планета ровно одна 
# Ввод:    orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)] 
# print(*find_farthest_orbit(orbits)) 
# Вывод: 2.5 10

# 1 вариант (Общий)
planets = [(2,3), (5,8), (2,4), (1,9), (7,7), (3,1), (5,5)]
print(planets)
no_use = list(filter(lambda x: x[0] != x[1], planets))
print(no_use)

find_orbit = list(map(lambda x: x[0] * x[1], no_use))
print(no_use[find_orbit.index(max(find_orbit))])

# 2 вариант (Стоун)
# import random

# list_palanets = [(random.randint(1,10), random.randint(1,10)) for _ in range(15)]
# print(list_palanets)

# list_palanets = list(filter(lambda x: x[0] != x[1], list_palanets))
# print(list_palanets)

# weight_palanets = list(map(lambda x: x[0]*x[1], list_palanets))
# print(weight_palanets)

# max_index = max(list_palanets, key=lambda x: x[0]*x[1])
# print(max_index)